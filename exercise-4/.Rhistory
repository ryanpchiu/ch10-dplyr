# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(nycflights13)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library("nycflights13")
library(dplyr)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(nycflights13)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(nycflights13)
library(dplyr)
View(nycflights13)
nycflights13::airlines
is.data.frame(nycflights13)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(nycflights13)
library(dplyr)
install.packages("nycflights13")
install.packages("nycflights13")
View(nycflights13)
nycflights13
is.data.frame(nycflights13)
View(flights)
flights
install.packages("nycflights13")
library(nycflights13)
install.packages("nycflights13")
flights
View("flights")
View(flights)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(nycflights13)
View(flights)
library(dplyr)
library(dplyr)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(nycflights13)
install.packages("nycflights13")
View(flights)
flights
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(nycflights13)
flights
View(flights)
nrow(flights)
ncol(flights)
# What are the names of the columns?
colnames(flights)
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
??flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, time_gained_or_lost == arr_delay - dep_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, time_gained_or_lost = arr_delay - dep_delay)
library(dplyr)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
mutate(flights, time_gained_or_lost = arr_delay - dep_delay)
View(flights)
flights_data <- data_frame(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flight_data <- mutate(flights, time_gained_or_lost = arr_delay - dep_delay)
View(flight_data)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flight_data, time_gained_or_lost)
arrange(flight_data, time_gained_or_lost)
arrange(flight_data, time_gained_or_lost)
View(flight_data)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flight1 <- arrange(flight_data, time_gained_or_lost)
View(flight1)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flight_data <- arrange(flight_data, time_gained_or_lost)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flight_data <- flights %>%
mutate(time_gained_or_lost = arr_delay - dep_delay) %>%
arrange(time_gained_or_lost)
View(flight_data)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flight_data$time_gained_or_lost)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarise(flights_data, mean = mean(time_gained_or_lost), na.rm = TRUE)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flight_data$time_gained_or_lost[time_gained_or_lost < 0])
flight_data
hist(flight_data$time_gained_or_lost[time_gained_or_lost < 0])
hist(flight_data$time_gained_or_lost[time_gained_or_lost > 0])
time_gained_or_lost
# Make a histogram of the amount of time gained using the `hist()` function
hist(flight_data$time_gained_or_lost[flight_data$time_gained_or_lost > 0])
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarise(flights_data, mean = mean(time_gained_or_lost), na.rm = TRUE)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarise(flight_data, mean = mean(time_gained_or_lost), na.rm = TRUE)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
average <- summarise(flight_data, mean = mean(time_gained_or_lost), na.rm = TRUE)
average
summarise(flight_data, mean = mean(time_gained_or_lost))
summarise(flight_data, mean = mean(time_gained_or_lost))
summarise(flight_data, mean = mean(time_gained_or_lost))
summarise(flight_data, mean = mean(time_gained_or_lost))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
average <- summarise(flight_data, mean = mean(time_gained_or_lost, na.rm = TRUE))
average
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
filter(flight_data, dest = "SEA")
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
filter(flight_data, dest = SEA)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
select(flight_data, dest = SEA)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flight_data$time_gained_or_lost)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
select(flight_data, dest = SeaTac)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
filter(flight_data, dest = SeaTac)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
filter(flight_data, dest = "SEA")
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
filter(flight_data, dest == "SEA")
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
select(flight_data, dest == "SEA")
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
select(flight_data, dest == "SEA")
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
Filter(flight_data, origin, dest, time_gained_or_lost)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
select(flight_data, origin, dest, time_gained_or_lost)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
select(flight_data, origin, dest, time_gained_or_lost) %>%
filter(dest == SEA)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
select(flight_data, origin, dest, time_gained_or_lost) %>%
filter(dest == "SEA")
SEA_flights <- flights %>%
select(origin, dest, time_gained_or_lost) %>%
filter(dest == "SEA")
SEA_flights <- flights_data %>%
select(origin, dest, time_gained_or_lost) %>%
filter(dest == "SEA")
SEA_flights <- flight_data %>%
select(origin, dest, time_gained_or_lost) %>%
filter(dest == "SEA")
SEA_flights
# On average, did flights to SeaTac gain or loose time?
mean(SEA_flights$time_gained_or_lost)
View(SEA_flights)
mean(SEA_flights$time_gained_or_lost)
mean(SEA_flights$time_gained_or_lost)
summarise(SEA_flights, mean = mean(time_gained_or_lost, na.rm = TRUE))
mean(SEA_flights$time_gained_or_lost, na.rm = TRUE)
flight_data %>%
select(air_time) %>%
filter(origin == "JFK", dest == "SEA")
flight_data %>%
select(air_time)
flight_data %>%
filter(origin == "JFK", dest == "SEA") %>%
select(air_time)
flight_data %>%
filter(origin == "JFK", dest == "SEA")
JFK_to_SEA <- flight_data %>%
filter(origin == "JFK", dest == "SEA") %>%
select(air_time) %>%
summarise(
mean = mean(air_time)
max = max(air_time)
min = min(air_time)
)
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
JFK_to_SEA <- flight_data %>%
filter(origin == "JFK", dest == "SEA") %>%
select(air_time) %>%
summarise(
mean = mean(air_time),
max = max(air_time),
min = min(air_time)
)
JFK_to_SEA
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
JFK_to_SEA <- flight_data %>%
filter(origin == "JFK", dest == "SEA") %>%
select(air_time) %>%
summarise(
mean = mean(air_time, na.rm = T),
max = max(air_time, na.rm = T),
min = min(air_time, na.rm = T)
)
JFK_to_SEA
flights <- mutate(flights, time_gained_or_lost = arr_delay - dep_delay)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(nycflights13)
library(dplyr)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
nrow(flights)
ncol(flights)
# What are the names of the columns?
colnames(flights)
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
??flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, time_gained_or_lost = arr_delay - dep_delay)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flight_data, time_gained_or_lost)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flight_data, -time_gained_or_lost)
# Exercise 4: practicing with dplyr
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(nycflights13)
library(dplyr)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
nrow(flights)
ncol(flights)
# What are the names of the columns?
colnames(flights)
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
??flights
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, time_gained_or_lost = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flight_data, -time_gained_or_lost)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>%
mutate(time_gained_or_lost = arr_delay - dep_delay) %>%
arrange(time_gained_or_lost)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$time_gained_or_lost)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
average <- summarise(flights, mean = mean(time_gained_or_lost, na.rm = TRUE))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
SEA_flights <- flights %>%
select(origin, dest, time_gained_or_lost) %>%
filter(dest == "SEA")
# On average, did flights to SeaTac gain or loose time?
mean(SEA_flights$time_gained_or_lost, na.rm = TRUE)
summarise(SEA_flights, mean = mean(time_gained_or_lost, na.rm = TRUE))
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
JFK_to_SEA <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
select(air_time) %>%
summarise(
mean = mean(air_time, na.rm = T),
max = max(air_time, na.rm = T),
min = min(air_time, na.rm = T)
)
install.packages("nycflights13")
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, time_gained_or_lost = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flight_data, -time_gained_or_lost)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- flights %>%
mutate(time_gained_or_lost = arr_delay - dep_delay) %>%
arrange(time_gained_or_lost)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$time_gained_or_lost)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
average <- summarise(flights, mean = mean(time_gained_or_lost, na.rm = TRUE))
average
SEA_flights <- flights %>%
select(origin, dest, time_gained_or_lost) %>%
filter(dest == "SEA")
SEA_flights
# On average, did flights to SeaTac gain or loose time?
mean(SEA_flights$time_gained_or_lost, na.rm = TRUE)
summarise(SEA_flights, mean = mean(time_gained_or_lost, na.rm = TRUE))
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
JFK_to_SEA <- flights %>%
filter(origin == "JFK", dest == "SEA") %>%
select(air_time) %>%
summarise(
mean = mean(air_time, na.rm = T),
max = max(air_time, na.rm = T),
min = min(air_time, na.rm = T)
)
JFK_to_SEA
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
View(flights)
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- group_by(flights, month) %>%
summarise(mean = mean(dep_delay))
dep_delay_by_month
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- group_by(flights, month) %>%
summarise(mean = mean(dep_delay, na.rm = T))
dep_delay_by_month
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- group_by(flights, month) %>%
summarise(avg = mean(dep_delay, na.rm = T))
dep_delay_by_month
# Which month had the greatest average departure delay?
max_avg_month <- select(dep_delay_by_month, greatest = max(avg))
# What was the average departure delay in each month?
# Save this as a data frame `dep_delay_by_month`
# Hint: you'll have to perform a grouping operation then summarizing your data
dep_delay_by_month <- group_by(flights, month) %>%
summarise(avg = mean(dep_delay, na.rm = T))
# Which month had the greatest average departure delay?
max_avg_month <- select(dep_delay_by_month, greatest = max(avg))
# Which month had the greatest average departure delay?
max_avg_month <- select(dep_delay_by_month, avg = max(avg))
# Which month had the greatest average departure delay?
max_avg_month <- select(dep_delay_by_month, max = max(avg))
# Which month had the greatest average departure delay?
max_avg_month <- select(dep_delay_by_month, month[max = max(avg)])
View(dep_delay_by_month)
select(dep_delay_by_month, month == month[max = max(avg)])
select(dep_delay_by_month, month == month[max = max(avg)])
select(dep_delay_by_month, month == month[max = max(avg)])
month
dep_delay_by_month$month
select(dep_delay_by_month)
filter(avg == max(avg))
dep_delay_by_month %>%
filter(avg == max(avg))
# Which month had the greatest average departure delay?
max_avg_month <- dep_delay_by_month %>%
filter(avg == max(avg))
max_avg_month
# Which month had the greatest average departure delay?
max_avg_month <- dep_delay_by_month %>%
filter(avg == max(avg)) %>%
select(month)
max_avg_month
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create
# a scatterplot by passing that data frame to the 'plot()' function
plot(flights$month, flights$dep_delay)
plot(flights$month, flights$dep_delay)
plot(flights$month, flights$dep_delay)
plot(flights$month, flights$dep_delay)
plot(flights$month, flights$dep_delay)
# If your above data frame contains just two columns (e.g., "month", and "delay" in that order), you can create
# a scatterplot by passing that data frame to the 'plot()' function
plot(dep_delay_by_month)
flights %>%
group_by(dest)
flights %>%
filter(dest, arr_delay)
flights %>%
filter(dest, arr_delay) %>%
flights %>%
filter(dest, arr_delay)
flights %>%
filter(dest, arr_delay)
View(flights)
flights %>%
select(dest, arr_delay)
flights %>%
select(dest, arr_delay) %>%
group_by(dest) %>%
summarise(avg = mean(arr_delay))
flights %>%
select(dest, arr_delay) %>%
group_by(dest) %>%
summarise(avg = mean(arr_delay, na.rm = T))
flights %>%
select(dest, arr_delay) %>%
summarise(avg = mean(arr_delay, na.rm = T))
flights %>%
select(dest, arr_delay) %>%
group_by(dest) %>%
summarise(avg = mean(arr_delay, na.rm = T))
flights %>%
select(dest, arr_delay) %>%
group_by(dest) %>%
summarise(avg = mean(arr_delay, na.rm = T)) %>%
filter(max = max(avg))
flights %>%
select(dest, arr_delay) %>%
group_by(dest) %>%
summarise(avg = mean(arr_delay, na.rm = T)) %>%
filter(avg = max(avg))
flights %>%
select(dest, arr_delay) %>%
group_by(dest) %>%
summarise(avg = mean(arr_delay, na.rm = T)) %>%
filter(avg == max(avg))
flights %>%
select(dest, arr_delay) %>%
group_by(dest) %>%
summarise(avg = mean(arr_delay, na.rm = T)) %>%
filter(avg == max(avg, na.rm = T))
flights %>%
select(dest, arr_delay) %>%
group_by(dest) %>%
summarise(avg = mean(arr_delay, na.rm = T)) %>%
filter(avg == max(avg))
flights %>%
select(dest, arr_delay) %>%
group_by(dest) %>%
summarise(avg = mean(arr_delay, na.rm = T)) %>%
arrange(-arr_delay)
flights %>%
select(dest, arr_delay) %>%
group_by(dest) %>%
summarise(avg = mean(arr_delay, na.rm = T)) %>%
arrange(-avg)
flights %>%
select(dest, arr_delay) %>%
group_by(dest) %>%
summarise(avg = mean(arr_delay, na.rm = T)) %>%
head(arrange(-avg))
head(arrange(-avg))
head(arrange(-avg))
head(arrange(-avg))
flights %>%
select(dest, arr_delay) %>%
group_by(dest) %>%
summarise(avg = mean(arr_delay, na.rm = T)) %>%
arrange(-avg)
# To which destinations were the average arrival delays the highest?
# Hint: you'll have to perform a grouping operation then summarize your data
# You can use the `head()` function to view just the first few rows
dest_with_great_delays <- head(flights %>%
select(dest, arr_delay) %>%
group_by(dest) %>%
summarise(avg = mean(arr_delay, na.rm = T)) %>%
arrange(-avg)
)
dest_with_great_delays
