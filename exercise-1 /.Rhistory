# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997$average <- (cars_1997$hwy + cars_1997$cty)/2
View(cars_1997)
lintr::lint("exercise.R")
lintr::lint("exercise.R")
mean(cars_1997$hwy, cars_1997$cty)
mean(2,3)
mean(cars_1997$hwy)
mean(cars_1997$hwy + cars_1997$cty)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_two_wheels <- vehicles[vehicles$drive == "2-Wheel Drive", vehicles$cty > 20]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_two_wheels <- vehicles[vehicles$drive == "2-Wheel Drive", vehicles$cty > "20"]
vehicles[vehicles$drive == "2-Wheel Drive", vehicles$cty > 20]
vehicles$drive == "2-Wheel Drive"
vehicles$cty > 20
vehicles[vehicles$drive == "2-Wheel Drive", vehicles$cty > 20]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_two_wheels <- vehicles[vehicles$drive == "2-Wheel Drive", vehicles$cty > 20]
vehicles$drive == "2-Wheel Drive", vehicles$cty > 20
vehicles$cty > 20
vehicles$drive == "2-Wheel Drive"
vehicles[vehicles$drive == "2-Wheel Drive", ]
vehicles_two_wheels_20mpg <- vehicles_two_wheels[vehicles_two_wheels$cty > 20, ]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_two_wheels <- vehicles[vehicles$drive == "2-Wheel Drive", ]
vehicles_two_wheels_20mpg <- vehicles_two_wheels[vehicles_two_wheels$cty > 20, ]
vehicles_two_wheels_20mpg
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
vehicles_two_wheels_20mpg[vehicles_two_wheels_20mpg$hwy == min(vehicles_two_wheels_20mpg$hwy), "id"]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_id <- vehicles_two_wheels_20mpg[
vehicles_two_wheels_20mpg$hwy == min(vehicles_two_wheels_20mpg$hwy), "id"
]
worst_id
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
car_selection <- function(year_choice, make_choice){
year_vehicle <- vehicles[vehicles$year == year_choice, ]
year_make_vehicle <- year_vehicle[year_vehicle$make == make_choice, ]
}
car_selection(1984, "AM general")
car_selection(1984, "AM general")
>
car_selection(1984, "AM general")
# What was the most efficient Honda model of 1995?
car_selection(1995, Honda)
# What was the most efficient Honda model of 1995?
car_selection(1995, Honda)
# What was the most efficient Honda model of 1995?
car_selection(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
car_selection <- function(year_choice, make_choice){
year_vehicle <- vehicles[vehicles$year == year_choice, ]
year_make_vehicle <- year_vehicle[year_vehicle$make == make_choice, ]
return(year_make_vehicle$model)
}
# What was the most efficient Honda model of 1995?
car_selection(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
car_selection <- function(year_choice, make_choice){
year_vehicle <- vehicles[vehicles$year == year_choice, ]
year_make_vehicle <- year_vehicle[year_vehicle$make == make_choice, ]
car_selected <- year_make_vehicle[year_make_vehicle$hwy == max(year_make_vehicle$hwy), ]
return(car_selected)
}
# What was the most efficient Honda model of 1995?
car_selection(1995, "Honda")
year_make_vehicle[year_make_vehicle$hwy == max(year_make_vehicle$hwy), ]
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
car_selection <- function(year_choice, make_choice){
year_vehicle <- vehicles[vehicles$year == year_choice, ]
year_make_vehicle <- year_vehicle[year_vehicle$make == make_choice, ]
car_selected <- year_make_vehicle[year_make_vehicle$hwy == max(year_make_vehicle$hwy), "model"]
return(car_selected)
}
# What was the most efficient Honda model of 1995?
car_selection(1995, "Honda")
# Arrange the 1997 cars by highway (`hwy`) gas milage
cars_1997_hwy <- arrange(cars_1997, hwy)
# Install and load the "fueleconomy" package
install.packages("devtools")
install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Install and load the "dplyr" library
install.packages("dpylr")
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles, make)
makes
makes
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
nrow(distinct(vehicles, make))
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- filter(vehicles, year==1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
cars_1997_hwy <- arrange(cars_1997, hwy)
View(cars_1997_hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
mutate(cars_1997, average = (cty + hwy) / 2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filter(cars, drive == "2-Wheel Drive")
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filter(cars, drive=="2-Wheel Drive")
View(cars)
View(cars_1997)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filter(vehicles, drive=="2-Wheel Drive")
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filter(vehicles, drive=="2-Wheel Drive", cty > 20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filter(vehicles, drive=="2-Wheel Drive")
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filter(vehicles, drive=="2-Wheel Drive" & cty > 20)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
filter(vehicles, drive=="2-Wheel Drive", cty > 20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(vehicles, hwy == min(hwy)), id)
hwy == min(hwy)
filter(vehicles, hwy == min(hwy)
filter(vehicles, hwy == min(hwy))
filter(vehicles, hwy == min(hwy))
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(vehicles, hwy == min(hwy)), id)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_id <- vehicles_two_wheels_20mpg[
vehicles_two_wheels_20mpg$hwy == min(vehicles_two_wheels_20mpg$hwy), "id"
]
# Exercise 1: working with data frames (review)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(makes))
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- vehicles[vehicles$year == "1997", ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
cars_1997[order(cars_1997$hwy), ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997$average <- (cars_1997$hwy + cars_1997$cty) / 2
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_two_wheels <- vehicles[vehicles$drive == "2-Wheel Drive", ]
vehicles_two_wheels_20mpg <- vehicles_two_wheels[vehicles_two_wheels$cty > 20, ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_id <- vehicles_two_wheels_20mpg[
vehicles_two_wheels_20mpg$hwy == min(vehicles_two_wheels_20mpg$hwy), "id"
]
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
car_selection <- function(year_choice, make_choice){
year_vehicle <- vehicles[vehicles$year == year_choice, ]
year_make_vehicle <- year_vehicle[year_vehicle$make == make_choice, ]
car_selected <- year_make_vehicle[year_make_vehicle$hwy == max(year_make_vehicle$hwy), "model"]
return(car_selected)
}
# What was the most efficient Honda model of 1995?
car_selection(1995, "Honda")
vehicles_two_wheels_20mpg[
vehicles_two_wheels_20mpg$hwy == min(vehicles_two_wheels_20mpg$hwy), "id"
]
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_vehicles <- filter(vehicles, drive=="2-Wheel Drive", cty > 20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(two_wheel_vehicles, hwy == min(hwy)), id)
vehicles_two_wheels_20mpg[
vehicles_two_wheels_20mpg$hwy == min(vehicles_two_wheels_20mpg$hwy), "id"
]
vehicles_two_wheels[vehicles_two_wheels$cty > 20, ]
filter(vehicles, drive=="2-Wheel Drive", cty > 20)
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
car_selection <- function(year_choice, make_choice){
year_make_vehicle <- vehicle[vehicles$year == year_choice & vehicle$make == make_choice, ]
car_selected <- year_make_vehicle[year_make_vehicle$hwy == max(year_make_vehicle$hwy), "model"]
return(car_selected)
}
# What was the most efficient Honda model of 1995?
car_selection(1995, "Honda")
# Exercise 1: working with data frames (review)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(makes))
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- vehicles[vehicles$year == "1997", ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
cars_1997[order(cars_1997$hwy), ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997$average <- (cars_1997$hwy + cars_1997$cty) / 2
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_two_wheels <- vehicles[vehicles$drive == "2-Wheel Drive", ]
vehicles_two_wheels_20mpg <- vehicles_two_wheels[vehicles_two_wheels$cty > 20, ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_id <- vehicles_two_wheels_20mpg[
vehicles_two_wheels_20mpg$hwy == min(vehicles_two_wheels_20mpg$hwy), "id"
]
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
car_selection <- function(year_choice, make_choice){
year_make_vehicle <- vehicle[vehicles$year == year_choice & vehicle$make == make_choice, ]
car_selected <- year_make_vehicle[year_make_vehicle$hwy == max(year_make_vehicle$hwy), "model"]
return(car_selected)
}
# What was the most efficient Honda model of 1995?
car_selection(1995, "Honda")
install.packages("devtools")
# Exercise 1: working with data frames (review)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(makes))
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- vehicles[vehicles$year == "1997", ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
cars_1997[order(cars_1997$hwy), ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
cars_1997$average <- (cars_1997$hwy + cars_1997$cty) / 2
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_two_wheels <- vehicles[vehicles$drive == "2-Wheel Drive", ]
vehicles_two_wheels_20mpg <- vehicles_two_wheels[vehicles_two_wheels$cty > 20, ]
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_id <- vehicles_two_wheels_20mpg[
vehicles_two_wheels_20mpg$hwy == min(vehicles_two_wheels_20mpg$hwy), "id"
]
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
car_selection <- function(year_choice, make_choice){
year_make_vehicle <- vehicle[vehicles$year == year_choice & vehicle$make == make_choice, ]
car_selected <- year_make_vehicle[year_make_vehicle$hwy == max(year_make_vehicle$hwy), "model"]
return(car_selected)
}
# What was the most efficient Honda model of 1995?
car_selection(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
car_selection <- function(year_choice, make_choice){
year_make_vehicle <- vehicle[vehicles$year == year_choice & vehicle$make == make_choice, ]
car_selected <- year_make_vehicle[year_make_vehicle$hwy == max(year_make_vehicle$hwy), "model"]
return(car_selected)
}
# What was the most efficient Honda model of 1995?
car_selection(1995, "Honda")
vehicles
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
car_selection <- function(year_choice, make_choice){
year_make_vehicle <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, ]
car_selected <- year_make_vehicle[year_make_vehicle$hwy == max(year_make_vehicle$hwy), "model"]
return(car_selected)
}
# What was the most efficient Honda model of 1995?
car_selection(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
selection_of_car <- function(year_choice, make_choice){
filtered_car <- filter(vehicles, year ==year_choice, make == make_choice, hwy == max(hwy))
selected_car <- select(filtered_car, model)
return(selected_car)
}
# What was the most efficient Honda model of 1995?
selected_car <- (1995, "Honda")
# What was the most efficient Honda model of 1995?
selected_car(1995, "Honda")
# What was the most efficient Honda model of 1995?
selection_of_car(1995, "Honda")
# What was the most efficient Honda model of 1995?
selection_of_car(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
selection_of_car <- function(year_choice, make_choice){
filtered_car <- filter(vehicles, year ==year_choice, make == make_choice, hwy == max(hwy))
selected_car <- select(filtered_car, model)
return(selected_car)
}
# What was the most efficient Honda model of 1995?
selection_of_car(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
selection_of_car <- function(year_choice, make_choice){
filtered_car <- filter(vehicles, year == year_choice, make == make_choice)
filtered <- filter(filtered_car, hwy == max(hwy))
selected_car <- select(filtered_car, model)
return(selected_car)
}
# What was the most efficient Honda model of 1995?
selection_of_car(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
selection_of_car <- function(year_choice, make_choice){
filtered_car <- filter(vehicles, year == year_choice, make == make_choice)
filtered <- filter(filtered_car, hwy == max(hwy))
selected_car <- select(filtered_car, model)
}
# What was the most efficient Honda model of 1995?
selection_of_car(1995, "Honda")
make
make
# Exercise 2: working with `dplyr`
# Note that this exercise repeats the analysis from Exercise 1, but should be
# performed using `dplyr` (do not directly access or manipulate the data frames)
# Install and load the "fueleconomy" package
install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Install and load the "dplyr" library
install.packages("dpylr")
library("dplyr")
install.packages("devtools")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
selection_of_car <- function(year_choice, make_choice){
filtered_car <- filter(vehicles, year == year_choice, make == make_choice)
filtered <- filter(filtered_car, hwy == max(hwy))
selected_car <- select(filtered_car, model)
}
# What was the most efficient Honda model of 1995?
selection_of_car(1995, "Honda")
# What was the most efficient Honda model of 1995?
selection_of_car(1995, "Honda")
filter(vehicles, make)
filter(vehicles, makes)
View(vehicles)
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
View(fueleconomy)
View(vehicle)
# Install and load the "fueleconomy" package
install.packages("devtools")
devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Install and load the "dplyr" library
install.packages("dpylr")
library("dplyr")
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles, make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
nrow(distinct(vehicles, make))
# Filter the data set for vehicles manufactured in 1997
cars_1997 <- filter(vehicles, year==1997)
# Arrange the 1997 cars by highway (`hwy`) gas milage
cars_1997_hwy <- arrange(cars_1997, hwy)
View(cars_1997_hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
mutate(cars_1997, average = (cty + hwy) / 2)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
two_wheel_vehicles <- filter(vehicles, drive=="2-Wheel Drive", cty > 20)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
select(filter(two_wheel_vehicles, hwy == min(hwy)), id)
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
selection_of_car <- function(year_choice, make_choice){
filtered_car <- filter(vehicles, year == year_choice, make == make_choice)
filtered <- filter(filtered_car, hwy == max(hwy))
selected_car <- select(filtered_car, model)
}
# What was the most efficient Honda model of 1995?
selection_of_car(1995, "Honda")
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
selection_of_car <- function(year_choice, make_choice){
filtered_car <- filter(vehicles, year == year_choice, make == make_choice)
filtered <- filter(filtered_car, hwy == max(hwy))
selected_car <- select(filtered_car, model)
}
# What was the most efficient Honda model of 1995?
selection_of_car(1995, "Honda")
selection_of_car(1995, "Honda")
View(vehicles)
makes
makes
selection_of_car(1995, "Honda")
